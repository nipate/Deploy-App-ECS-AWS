{
  "projectName": "taskmaster-build",
  "sourceTypeOverride": "NO_SOURCE",
  "buildspecOverride": "version: 0.2\nphases:\n  pre_build:\n    commands:\n      - echo Logging in to Amazon ECR...\n      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com\n      - echo Creating app structure...\n      - mkdir -p app/backend\n  build:\n    commands:\n      - echo Build started on `date`\n      - echo Creating Flask app...\n      - |\n        cat > app/backend/app.py << 'EOF'\n        from flask import Flask, jsonify, request\n        import os\n        from datetime import datetime\n        \n        app = Flask(__name__)\n        \n        @app.route('/health', methods=['GET'])\n        def health_check():\n            return jsonify({\n                'status': 'healthy',\n                'timestamp': datetime.utcnow().isoformat(),\n                'environment': os.getenv('ENVIRONMENT', 'dev')\n            })\n        \n        @app.route('/api/projects', methods=['GET'])\n        def get_projects():\n            projects = [\n                {'id': '1', 'name': 'Website Redesign', 'status': 'active'},\n                {'id': '2', 'name': 'Mobile App Development', 'status': 'planning'}\n            ]\n            return jsonify({'projects': projects})\n        \n        @app.route('/api/tasks', methods=['GET'])\n        def get_tasks():\n            tasks = [\n                {'id': '1', 'project_id': '1', 'title': 'Design homepage mockup', 'status': 'completed'},\n                {'id': '2', 'project_id': '1', 'title': 'Implement responsive layout', 'status': 'in_progress'}\n            ]\n            return jsonify({'tasks': tasks})\n        \n        if __name__ == '__main__':\n            app.run(host='0.0.0.0', port=5000, debug=True)\n        EOF\n      - |\n        cat > app/backend/requirements.txt << 'EOF'\n        Flask==2.3.3\n        gunicorn==21.2.0\n        EOF\n      - |\n        cat > app/backend/Dockerfile << 'EOF'\n        FROM public.ecr.aws/docker/library/python:3.11-slim\n        WORKDIR /app\n        COPY requirements.txt .\n        RUN pip install --no-cache-dir -r requirements.txt\n        COPY . .\n        EXPOSE 5000\n        CMD [\"gunicorn\", \"--bind\", \"0.0.0.0:5000\", \"app:app\"]\n        EOF\n      - echo Building the Docker image...\n      - cd app/backend\n      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .\n      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG\n  post_build:\n    commands:\n      - echo Build completed on `date`\n      - echo Pushing the Docker image...\n      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG"
}