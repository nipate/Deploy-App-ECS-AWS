version: 0.2

phases:
  pre_build:
    commands:
      - echo 🔐 Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo 📁 Creating app structure...
      - mkdir -p app/backend
      
  build:
    commands:
      - echo 🏗️ Build started on `date`
      - echo 🐍 Creating Flask app with CORS support...
      - |
        cat > app/backend/app.py << 'EOF'
        from flask import Flask, jsonify, request
        import os
        from datetime import datetime
        
        app = Flask(__name__)
        
        # Add CORS headers to all responses
        @app.after_request
        def after_request(response):
            response.headers.add('Access-Control-Allow-Origin', '*')
            response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization')
            response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
            return response
        
        @app.route('/health', methods=['GET', 'OPTIONS'])
        def health_check():
            return jsonify({
                'status': 'healthy',
                'timestamp': datetime.utcnow().isoformat(),
                'environment': os.getenv('ENVIRONMENT', 'dev'),
                'version': os.getenv('BUILD_NUMBER', 'latest'),
                'deployed_by': 'GitHub Actions CI/CD'
            })
        
        @app.route('/api/projects', methods=['GET'])
        def get_projects():
            projects = [
                {
                    'id': '1', 
                    'name': 'Website Redesign', 
                    'status': 'active',
                    'created_at': '2024-01-15T10:00:00Z',
                    'team_size': 4
                },
                {
                    'id': '2', 
                    'name': 'Mobile App Development', 
                    'status': 'planning',
                    'created_at': '2024-01-20T14:30:00Z',
                    'team_size': 6
                },
                {
                    'id': '3', 
                    'name': 'API Modernization', 
                    'status': 'in_progress',
                    'created_at': '2024-01-25T09:15:00Z',
                    'team_size': 3
                }
            ]
            return jsonify({'projects': projects, 'total': len(projects)})
        
        @app.route('/api/tasks', methods=['GET'])
        def get_tasks():
            project_id = request.args.get('project_id')
            tasks = [
                {
                    'id': '1',
                    'project_id': '1',
                    'title': 'Design homepage mockup',
                    'status': 'completed',
                    'assignee': 'Lisa Chen',
                    'priority': 'high',
                    'due_date': '2024-02-01'
                },
                {
                    'id': '2',
                    'project_id': '1', 
                    'title': 'Implement responsive layout',
                    'status': 'in_progress',
                    'assignee': 'Mike Johnson',
                    'priority': 'medium',
                    'due_date': '2024-02-05'
                },
                {
                    'id': '3',
                    'project_id': '2',
                    'title': 'Setup React Native project',
                    'status': 'planning',
                    'assignee': 'Sarah Wilson',
                    'priority': 'high',
                    'due_date': '2024-02-10'
                },
                {
                    'id': '4',
                    'project_id': '3',
                    'title': 'API documentation review',
                    'status': 'in_progress',
                    'assignee': 'David Brown',
                    'priority': 'low',
                    'due_date': '2024-02-15'
                }
            ]
            
            if project_id:
                tasks = [t for t in tasks if t['project_id'] == project_id]
            
            return jsonify({'tasks': tasks, 'total': len(tasks)})
        
        @app.route('/api/stats', methods=['GET'])
        def get_stats():
            return jsonify({
                'total_projects': 3,
                'active_projects': 2,
                'total_tasks': 4,
                'completed_tasks': 1,
                'in_progress_tasks': 2,
                'pending_tasks': 1,
                'team_members': 4,
                'deployment_info': {
                    'environment': os.getenv('ENVIRONMENT', 'dev'),
                    'build_number': os.getenv('BUILD_NUMBER', 'latest'),
                    'deployed_at': datetime.utcnow().isoformat(),
                    'deployed_by': 'GitHub Actions CI/CD'
                }
            })
        
        if __name__ == '__main__':
            app.run(host='0.0.0.0', port=5000, debug=True)
        EOF
      - |
        cat > app/backend/requirements.txt << 'EOF'
        Flask==2.3.3
        gunicorn==21.2.0
        flask-cors==4.0.0
        EOF
      - |
        cat > app/backend/Dockerfile << 'EOF'
        FROM public.ecr.aws/docker/library/python:3.11-slim
        
        WORKDIR /app
        
        # Copy requirements first for better caching
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Create non-root user for security
        RUN useradd --create-home --shell /bin/bash app && chown -R app:app /app
        USER app
        
        EXPOSE 5000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD curl -f http://localhost:5000/health || exit 1
        
        CMD ["gunicorn", "--bind", "0.0.0.0:5000", "--workers", "2", "--timeout", "60", "app:app"]
        EOF
      - echo 🐳 Building Docker image...
      - cd app/backend
      - docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      
  post_build:
    commands:
      - echo 🚀 Build completed on `date`
      - echo 📤 Pushing Docker image to ECR...
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo ✅ Image pushed successfully!
      
artifacts:
  files:
    - '**/*'