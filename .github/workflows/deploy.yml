name: üöÄ TaskMaster Multi-Environment CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
    paths:
      - 'app/backend/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: taskmaster-backend
  ECS_CLUSTER: dev-cluster
  CODEBUILD_PROJECT: taskmaster-build
  DEV_ECS_SERVICE: taskmaster-backend-dev
  STAGING_ECS_SERVICE: taskmaster-backend-staging

jobs:
  build-and-deploy:
    name: üèóÔ∏è Build and Deploy
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      
    - name: üîê Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: üèóÔ∏è Start CodeBuild
      run: |
        echo "üöÄ Starting CodeBuild for TaskMaster..."
        BUILD_ID=$(aws codebuild start-build \
          --project-name ${{ env.CODEBUILD_PROJECT }} \
          --source-type-override NO_SOURCE \
          --buildspec-override file://buildspec-github.yml \
          --query 'build.id' --output text)
        
        echo "üìã Build ID: $BUILD_ID"
        echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
        
    - name: ‚è≥ Wait for CodeBuild completion
      run: |
        echo "‚è≥ Waiting for build $BUILD_ID to complete..."
        
        while true; do
          STATUS=$(aws codebuild batch-get-builds \
            --ids $BUILD_ID \
            --query 'builds[0].buildStatus' --output text)
          
          echo "üìä Build status: $STATUS"
          
          if [ "$STATUS" = "SUCCEEDED" ]; then
            echo "‚úÖ Build completed successfully!"
            break
          elif [ "$STATUS" = "FAILED" ] || [ "$STATUS" = "FAULT" ] || [ "$STATUS" = "STOPPED" ] || [ "$STATUS" = "TIMED_OUT" ]; then
            echo "‚ùå Build failed with status: $STATUS"
            exit 1
          fi
          
          sleep 30
        done
        
    - name: üöÄ Deploy to Dev Environment
      run: |
        echo "üöÄ Deploying to Dev Environment..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.DEV_ECS_SERVICE }} \
          --force-new-deployment \
          --query 'service.serviceName' --output text
          
        echo "‚úÖ Dev deployment triggered!"
        
    - name: üé≠ Deploy to Staging Environment
      run: |
        echo "üé≠ Deploying to Staging Environment..."
        aws ecs update-service \
          --cluster ${{ env.ECS_CLUSTER }} \
          --service ${{ env.STAGING_ECS_SERVICE }} \
          --force-new-deployment \
          --query 'service.serviceName' --output text
          
        echo "‚úÖ Staging deployment triggered!"
        
    - name: üîç Verify Multi-Environment Deployment
      run: |
        echo "üîç Verifying deployments..."
        
        # Wait for both services to stabilize
        echo "‚è≥ Waiting for Dev environment..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.DEV_ECS_SERVICE }}
          
        echo "‚è≥ Waiting for Staging environment..."
        aws ecs wait services-stable \
          --cluster ${{ env.ECS_CLUSTER }} \
          --services ${{ env.STAGING_ECS_SERVICE }}
          
        # Get ALB DNS names
        DEV_ALB=$(aws cloudformation describe-stacks \
          --stack-name taskmaster-dev-alb \
          --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" \
          --output text)
          
        STAGING_ALB=$(aws cloudformation describe-stacks \
          --stack-name taskmaster-staging-alb \
          --query "Stacks[0].Outputs[?OutputKey=='ALBDNSName'].OutputValue" \
          --output text)
          
        echo "üåê Dev URL: http://$DEV_ALB"
        echo "üé≠ Staging URL: http://$STAGING_ALB"
        
        # Test both environments
        echo "üîç Testing Dev environment..."
        if curl -f "http://$DEV_ALB/health"; then
          echo "‚úÖ Dev health check passed!"
        else
          echo "‚ùå Dev health check failed!"
          exit 1
        fi
        
        echo "üîç Testing Staging environment..."
        if curl -f "http://$STAGING_ALB/health"; then
          echo "‚úÖ Staging health check passed!"
        else
          echo "‚ùå Staging health check failed!"
          exit 1
        fi
        
        echo "üéâ Multi-environment deployment successful!"