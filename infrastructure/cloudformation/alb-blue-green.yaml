AWSTemplateFormatVersion: '2010-09-09'
Description: 'Blue/Green ALB with weighted routing'

Parameters:
  Environment:
    Type: String
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub '${Environment}-alb-bg'
      Scheme: internet-facing
      Type: application
      Subnets:
        - Fn::ImportValue: !Sub '${Environment}-PublicSubnets'
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${Environment}-alb-blue-green'

  # Security Group for ALB
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for ALB
      VpcId:
        Fn::ImportValue: !Sub '${Environment}-VPC'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  # Blue Target Group
  BlueTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-blue-tg'
      Port: 5000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${Environment}-VPC'
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Green Target Group
  GreenTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub '${Environment}-green-tg'
      Port: 5000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub '${Environment}-VPC'
      TargetType: ip
      HealthCheckPath: /health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 3

  # Listener with Blue/Green routing
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref BlueTargetGroup
                Weight: 100  # Start with 100% Blue
              - TargetGroupArn: !Ref GreenTargetGroup
                Weight: 0    # 0% Green initially
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

Outputs:
  ALBDNSName:
    Description: ALB DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub '${Environment}-ALB-DNS'

  BlueTargetGroupArn:
    Description: Blue Target Group ARN
    Value: !Ref BlueTargetGroup
    Export:
      Name: !Sub '${Environment}-BlueTargetGroup'

  GreenTargetGroupArn:
    Description: Green Target Group ARN
    Value: !Ref GreenTargetGroup
    Export:
      Name: !Sub '${Environment}-GreenTargetGroup'

  ALBListenerArn:
    Description: ALB Listener ARN for Blue/Green switching
    Value: !Ref ALBListener
    Export:
      Name: !Sub '${Environment}-ALBListener'